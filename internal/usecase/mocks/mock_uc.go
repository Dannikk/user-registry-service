// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=mocks/mock_uc.go
//
// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	entity "user_registry/internal/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockSigner is a mock of Signer interface.
type MockSigner struct {
	ctrl     *gomock.Controller
	recorder *MockSignerMockRecorder
}

// MockSignerMockRecorder is the mock recorder for MockSigner.
type MockSignerMockRecorder struct {
	mock *MockSigner
}

// NewMockSigner creates a new mock instance.
func NewMockSigner(ctrl *gomock.Controller) *MockSigner {
	mock := &MockSigner{ctrl: ctrl}
	mock.recorder = &MockSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigner) EXPECT() *MockSignerMockRecorder {
	return m.recorder
}

// GetSign mocks base method.
func (m *MockSigner) GetSign(ctx context.Context, tk *entity.TextKey) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSign", ctx, tk)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSign indicates an expected call of GetSign.
func (mr *MockSignerMockRecorder) GetSign(ctx, tk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSign", reflect.TypeOf((*MockSigner)(nil).GetSign), ctx, tk)
}

// MockUserRegistry is a mock of UserRegistry interface.
type MockUserRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockUserRegistryMockRecorder
}

// MockUserRegistryMockRecorder is the mock recorder for MockUserRegistry.
type MockUserRegistryMockRecorder struct {
	mock *MockUserRegistry
}

// NewMockUserRegistry creates a new mock instance.
func NewMockUserRegistry(ctrl *gomock.Controller) *MockUserRegistry {
	mock := &MockUserRegistry{ctrl: ctrl}
	mock.recorder = &MockUserRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRegistry) EXPECT() *MockUserRegistryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRegistry) CreateUser(ctx context.Context, user *entity.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRegistryMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRegistry)(nil).CreateUser), ctx, user)
}

// MockIncrementor is a mock of Incrementor interface.
type MockIncrementor struct {
	ctrl     *gomock.Controller
	recorder *MockIncrementorMockRecorder
}

// MockIncrementorMockRecorder is the mock recorder for MockIncrementor.
type MockIncrementorMockRecorder struct {
	mock *MockIncrementor
}

// NewMockIncrementor creates a new mock instance.
func NewMockIncrementor(ctrl *gomock.Controller) *MockIncrementor {
	mock := &MockIncrementor{ctrl: ctrl}
	mock.recorder = &MockIncrementorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIncrementor) EXPECT() *MockIncrementorMockRecorder {
	return m.recorder
}

// Increment mocks base method.
func (m *MockIncrementor) Increment(ctx context.Context, kv *entity.KeyValue) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increment", ctx, kv)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Increment indicates an expected call of Increment.
func (mr *MockIncrementorMockRecorder) Increment(ctx, kv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockIncrementor)(nil).Increment), ctx, kv)
}
